#define _CRT_SECURE_NO_WARNINGS
#include<algorithm>
#include<iostream>
#include<string.h>
#include<math.h>
#include<string>
using namespace std;
typedef long long ll;
const int N = 300;
int a[N][N];
int free_x[N];   //自由变元
int x[N];  //解集 
int Free_num = 0;  //自由变元数
int Guass(int Row, int Column)  //系数矩阵的行和列
{
	int row = 0, col = 0, max_r;
	Free_num = 0;
	for (row = 0; row < Row && col < Column; row++, col++)
	{
		max_r = row;
		for (int i = row + 1; i < Row; i++)   //找出当前列最大值
			if (abs(a[i][col]) > abs(a[max_r][col]))
				max_r = i;
		if (a[max_r][col] == 0)  //记录自由变元
		{
			row--;
			free_x[Free_num++] = col + 1;
			continue;
		}
		if (max_r != row)  //交换
			for (int i = col; i < Column + 1; i++)
				swap(a[row][i], a[max_r][i]);
		for (int i = row + 1; i < Row; i++)   //消元
		{
			if (a[i][col] != 0)
			{
				for (int j = col; j < Column + 1; j++)
					a[i][j] ^= a[row][j];
			}
		}
	}
	for (int i = row; i < Row; i++)   //无解
		if (a[i][Column] != 0)
			return -1;
	//枚举自由元
	int res = 0x3f3f3f3f;
	for (int s = 0; s < (1 << Free_num); s++) {
		int num = 0;
		int s0 = s;
		for (int i = 0; i < Free_num; i++) {
			if (x[free_x[i]] = s0 & 1) num++;
			s0 >>= 1;
		}
		for (int i = row - 1; i >= 0; i--) {
			int tmp = a[i][Column];
			for (int j = i + 1; j < Column; j++) {
				tmp ^= (a[i][j] && x[j]);
			}
			if (tmp)
			{
				num++;
			}
			x[i] = tmp;
			
		}
		res = min(res, num);
	}
	return res;
	//if (row < Column)   //无穷多解
	//	return Column - row;
	////唯一解
	//for (int i = Column - 1; i >= 0; i--)
	//{
	//	x[i] = a[i][Column];
	//	for (int j = i + 1; j < Column; j++)
	//		x[i] ^= (a[i][j] && x[j]);
	//}
	//return 0;
}

int main()
{
    int t;
    scanf("%d", &t);
    while (t--)
    {
		int n;
		scanf("%d", &n);
		for (int i = 0; i < n; i++)
		{
			string s;
			cin >> s;
			for (int j = 0; j < n; j++)
			{
				a[i*n+j][n * n] = 0;
				if (s[j] == 'w')a[i*n+j][n * n] = 1;
			}
		}
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				int k = i * n + j;
				if (k == 8)
				{
					int adasd = 1;
				}
				int left = k - 1;
				int right = k + 1;
				int up = k - n;
				int down = k + n;
				if (left >= i * n && left < (i + 1) * n);
				else left = -1;
				if (right >= i * n && right < (i + 1) * n);
				else right = -1;
				
				for (int i2 = 0; i2 < n; i2++)
				{
					for (int j2 = 0; j2 < n; j2++)
					{
						int k2 = i2 * n + j2;
						if (k2 == left || k2 == right || k2 == up || k2 == down)
						{
							a[k][k2] = 1;
						}
						else a[k][k2] = 0;
						a[k][k] = 1;
						//cout << a[k][k2] << " ";
					}
				}
				//cout << endl;
			}
		}
		
		int flag = Guass(n * n, n * n);
		if (flag != -1)
		{
			int sum = 0;
			for (int i = 0; i < n * n; i++)
			{
				sum += x[i];
			}
			printf("%d\n", flag);
		}
		else printf("inf\n");
    }
}
